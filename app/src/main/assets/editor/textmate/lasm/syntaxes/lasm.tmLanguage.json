{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "lasm",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#constants"
    },
    {
      "captures": {
        "1": {
          "name": "constant.language.lasm"
        },
        "2": {
          "name": "variable.parameter.lasm"
        }
      },
      "comment": ".line",
      "match": "\\s*(\\.line)\\s+(\\d+)"
    },
    {
      "beginCaptures": {
        "1": {
          "name": "constant.language.lasm"
        },
        "2": {
          "name": "constant.language.lasm"
        }
      },
      "comment": ".linedefined .. etc",
      "begin": "(\\.)\\b(version|format|int_size|size_t_size|instruction_size|integer_format|float_format|endianness|linedefined|lastlinedefined|numparams|is_vararg|maxstacksize|source)\\b\\s+",
      "end": "\n",
      "patterns": [
        {
          "match": "(\\d+)",
          "name": "constant.numeric.integer.lasm"
        },
        {
          "include": "#strings"
        }
      ]
    },
    {
      "beginCaptures": {
        "1": {
          "name": "constant.language.lasm"
        },
        "2": {
          "name": "constant.numeric.integer.lasm"
        }
      },
      "comment": ".upvalue",
      "name": "constant.language.lasm",
      "begin": "(\\.upvalue)\\s+",
      "end": "\\n",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#constants"
        }
      ]
    },
    {
      "beginCaptures": {
        "1": {
          "name": "constant.language.lasm"
        },
        "2": {
          "name": "constant.numeric.integer.lasm"
        }
      },
      "comment": ".local",
      "name": "constant.language.lasm",
      "begin": "(\\.local)\\s+",
      "end": "\\n",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#constants"
        }
      ]
    },
    {
      "beginCaptures": {
        "1": {
          "name": "constant.language.lasm"
        }
      },
      "comment": ".constant",
      "name": "constant.language.lasm",
      "begin": "(\\.constant)",
      "end": "\\n",
      "patterns": [
        {
          "beginCaptures": {
            "1": {
              "name": "variable.parameter.lasm"
            }
          },
          "name": "variable.parameter.lasm",
          "begin": "\\s+(k\\d+)\\s+",
          "end": "\n",
          "patterns": [
            {
              "include": "#strings"
            },
            {
              "include": "#constants"
            }
          ]
        }
      ]
    },
    {
      "beginCaptures": {
        "1": {
          "name": "constant.language.lasm"
        },
        "2": {
          "name": "constant.language.lasm"
        }
      },
      "comment": ".function",
      "begin": "(\\.)\\b(function)\\b\\s+",
      "end": "(\\w+\\/?)*",
      "endCaptures": {
        "0": {
          "name": "entity.name.function.path.lasm"
        }
      }
    },
    {
      "name": "entity.name.function.path.lasm",
      "comment": "opcodelist",
      "match": "\\b(move|loadk|loadbool|loadnil|getupval|getglobal|gettable|setglobal|setupval|settable|newtable|self|add|sub|mul|div|mod|pow|unm|not|len|concat|jmp|eq|lt|le|test|testset|call|tailcall|return|forloop|forprep|tforloop|setlist|close|closure|vararg|jmp|loadnil|loadkx|gettabup|settabup|setlist|tforcall|tforloop|extraarg|newtable|setlist|setlisto|tforprep|test|idiv|band|bor|bxor|shl|shr|bnot|loadi|loadf|loadfalse|lfalseskip|loadtrue|gettabup|gettable|geti|getfield|settabup|settable|seti|setfield|newtable|self|addi|addk|subk|mulk|modk|powk|divk|idivk|bandk|bork|bxork|shri|shli|add|sub|mul|mod|pow|div|idiv|band|bor|bxor|shl|shr|mmbin|mmbini|mmbink|concat|tbc|jmp|eq|lt|le|eqk|eqi|lti|lei|gti|gei|test|testset|tailcall|return|return0|return1|forloop|forprep|tforprep|tforcall|tforloop|setlist|vararg|varargprep|extrabyte)\\b"
    },
    {
      "name": "variable.parameter.lasm",
      "comment": ".label",
      "match": "\\s+(r|u|k|l)\\d+"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control.lasm"
        },
        "2": {
          "name": "variable.parameter.lasm"
        }
      },
      "comment": ".label",
      "match": "\\s*(\\.label)\\s+(l\\d+)"
    },
    {
      "captures": {
        "1": {
          "name": "constant.language.lasm"
        },
        "2": {
          "name": "variable.parameter.lasm"
        }
      },
      "comment": ".line",
      "match": "\\s*(\\.line)\\s+(\\d+)"
    }
  ],
  "repository": {
    "constants": {
      "patterns": [
        {
          "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
          "name": "constant.numeric.float.hexadecimal.lasm"
        },
        {
          "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
          "name": "constant.numeric.integer.hexadecimal.lasm"
        },
        {
          "match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
          "name": "constant.numeric.float.lasm"
        },
        {
          "match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
          "name": "constant.numeric.integer.lasm"
        },
        {
          "match": "(?<![^.]\\.|:)\\b(false|nil(?!:)|true)\\b(LITTLE|BIG)\\b|(?<![.])\\.{3}(?!\\.)",
          "name": "constant.language.lasm"
        }
      ]
    },
    "keywords": {
      "patterns": []
    },
    "strings": {
      "name": "string.quoted.double.lasm",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.lasm",
          "match": "\\\\."
        }
      ]
    },
    "comment": {
      "begin": "#",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.lasm"
        }
      },
      "end": "\\n",
      "name": "comment.line.number-sign.lasm"
    }
  },
  "scopeName": "source.lasm"
}
